#!/bin/bash
#
# usage: onemanga [-dlu] [-c <first chapter>[+|-<last chapter>]] <manga name> [<manga name> ...]
#

trap 'rm -f *.jpg tmp_*;' 0

base_url="http://www.onemanga.com"
base_dir=`pwd`

function calc() {
  echo "scale=2; $*" | bc -q 2>/dev/null | cut -f1 -d.
}

function progressbar() {
  width=20
  current=$1
  total=$2

  percent=`calc "$current / $total * 100"`
  stack=`calc "$current / $total * $width"`
  stack=${stack:=0}
  space=`calc "$width - $stack"`
 
  for i in `seq ${#percent} 3`; do echo -n " "; done
  echo -n "$percent% ["
  for i in `seq $stack`; do echo -n "#"; done
  for i in `seq $space`; do echo -n " "; done
  echo "]"
}

while getopts ":c:dlu" op; do
  case $op in
    c)
      if [[ $LATEST -eq 1 ]]; then
        echo "Invalid option: -c cannot be used with -l" >&2
        exit
      fi

      if [[ $UPDATE -eq 1 ]]; then
        echo "Invalid option: -c cannot be used with -u" >&2
        exit
      fi

      CHAPTER=1
      CHAPTER_ARG=$OPTARG
      ;;
    d)
      USE_DIR=1
      ;;
    l)
      if [[ $CHAPTER -eq 1 ]]; then
        echo "Invalid option: -l cannot be used with -c" >&2
        exit
      fi

      if [[ $UPDATE -eq 1 ]]; then
        echo "Invalid option: -l cannot be used with -u" >&2
        exit
      fi

      LATEST=1
      ;;
    u)
      if [[ $CHAPTER -eq 1 ]]; then
        echo "Invalid option: -u cannot be used with -c" >&2
        exit
      fi

      if [[ $LATEST -eq 1 ]]; then
        echo "Invalid option: -u cannot be used with -l" >&2
        exit
      fi

      UPDATE=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit
      ;;
  esac
done

shift $(($OPTIND - 1))

if [[ $CHAPTER = "" && $LATEST = "" ]]; then
  UPDATE=1
fi

if [[ $CHAPTER -eq 1 ]]; then
  if [[ `expr index "$CHAPTER_ARG" ++` -gt 0 ]]; then
    first_chapter=${CHAPTER_ARG%+*}
    last_chapter="+"
  elif [[ `expr index "$CHAPTER_ARG" -` -gt 0 ]]; then
    first_chapter=${CHAPTER_ARG%-*}
    last_chapter=${CHAPTER_ARG#*-}
  else
    first_chapter=$CHAPTER_ARG
    last_chapter=$CHAPTER_ARG
  fi
fi

for manga_name in "$@"; do
  manga_name=${manga_name%/}

  if [[ $USE_DIR -eq 1 ]]; then
    mkdir -p "$base_dir/$manga_name"
    cd "$base_dir/$manga_name"
  fi

  display_name=`echo $manga_name | sed "s/_/ /g"`
  word_count=`echo $display_name | wc -w`
  sort_key=$((word_count + 1))
  local_chapter=`ls ${manga_name}_*.cbr 2> /dev/null | sort -r -n -k $sort_key -t_ | head -n1`
  local_chapter=`basename "${local_chapter##*_}" .cbr`

  echo -n "opening $base_url/$manga_name..."
  wget -qN --no-cache $base_url/$manga_name/
  
  if [[ ! -f "index.html" ]]; then
    echo -e "\b\b\b [ERROR]\nthe url seems to be invalid, or there may be a problem with your internet connection"
    exit
  fi

  grep "ch-subject" index.html 2> /dev/null | grep "a href" | cut -f3 -d\/ > tmp_chapters
  
  if [[ ! -s tmp_chapters ]]; then
    echo -e "\b\b\b [ERROR]\ncannot extract chapters info from the url"
    exit
  fi
  
  echo -e "\b\b\b [OK]"

  latest_chapter=`head -1 tmp_chapters`
  
  if [[ -n $local_chapter && ! $CHAPTER -eq 1 ]]; then
    echo "local chapter: ${local_chapter} / latest chapter: $latest_chapter"
    
    if [[ $local_chapter == $latest_chapter ]]; then
      echo "you already have the latest chapter of $display_name"
      continue
    fi
  fi

  if [[ $LATEST -eq 1 ]]; then
    first_chapter=$latest_chapter
    last_chapter=$latest_chapter
  fi

  if [[ "$last_chapter" == "+" ]]; then
    last_chapter=$latest_chapter
  fi

  if [[ $UPDATE -eq 1 ]]; then
    if [[ $local_chapter == "" ]]; then
      first_chapter=`sort -n tmp_chapters | head -n1`
    else
      index=`sort -n tmp_chapters | grep -nm1 $local_chapter | cut -f1 -d:`
      first_chapter=`sort -n tmp_chapters | tail -n+$((index + 1)) | head -n1`
    fi

    last_chapter=$latest_chapter
  fi
  
  if [[ $CHAPTER -eq 1 || -z $local_chapter ]]; then
    echo "from chapter: $first_chapter / to chapter: $last_chapter"
  fi

  index=`sort -n tmp_chapters | grep -nm1 $first_chapter | cut -f1 -d:`
  last_index=`sort -n tmp_chapters | grep -nm1 $last_chapter | cut -f1 -d:`

  CHAPTERS=`sort -n tmp_chapters | awk 'FNR >= '$index' && FNR <= '$last_index`

  for chapter in $CHAPTERS; do
    echo "downloading $display_name chapter $chapter"
    echo -n "initializing..."
    page_location=`wget -qO - $base_url/$manga_name/$chapter/ | grep -i "begin reading" | cut -f2 -d\"`
    wget -qO tmp_page $base_url$page_location
    PAGES=`grep -i "option value" tmp_page | grep -i -v "select manga series" | cut -f2 -d\"`
    image_location=`grep -i "manga-page" tmp_page | cut -f4 -d\"`
    image_location=${image_location%/*.jpg}
    
    total=`echo $PAGES | wc -w`
    i=0

    for page in $PAGES; do
      let i++
      echo -ne "\r\e[0K`progressbar $i $total` ($i/$total)"
      wget -q "$image_location/$page.jpg"
    done

    cbr_file_name="${manga_name}_${chapter}.cbr"

    echo -ne "\r\e[0K`progressbar $i $total` (packing files...)"
    zip -q $cbr_file_name *.jpg && rm -f *.jpg
    echo -e "\r\e[0K`progressbar $i $total` ($cbr_file_name)"
  done
done
